if <Boolean Expression> {
    <code block>
} else if <Boolean Expression> {
    <code block>
} else {
    <code block>
}

package main

import "fmt"

func main() {
	firstRank := "39"
	secondRank := "614"

	if firstRank < secondRank {
		fmt.Println("\n First Course is doing better" +
			" than second course")
	} else if firstRank > secondRank {
		fmt.Println("\n Second Course is doing better" +
			" than first course")
	} else {
		fmt.Println("\n Both may be doing good or equally bad")
	}
}


if <simple statement>; <Boolean Expression> { // variables initialized here are in block scope
    <code block>
}

func main() {
	if firstRank, secondRank := "39", "614"; firstRank < secondRank {
		fmt.Println("\n First Course is doing better" +
			" than second course")


swicth <simple statemment> ; <expression> {
    case <expression>: <code>
    case <expression>: <code>
    default: <code>
}

func main() {
	switch "docker" {
	case "linux":
		fmt.Println("linux")
	case "docker":
		fmt.Println("docker")
		fallthrough // specific to GO
	case "windows":
		fmt.Println("windows")
	default:
		fmt.Println("deafult")
	}
}

func main() {

	switch tmpNum := random(); tmpNum {
	case 0, 2, 4, 6, 8:
		fmt.Println("We got an even number -", tmpNum)
	case 1, 3, 5, 7, 9:
		fmt.Println("We got an odd number -", tmpNum)
	}
}

func random() int {
	rand.Seed(time.Now().Unix())
	return rand.Intn(10)
}

// Error handling in GO using if statement - Idiomatic
	_, err := os.Open("/Users/mrigankapaul/err.txt")
	if err != nil {
		fmt.Println("File Not found", err)
	}
